openapi: 3.0.0
info:
  title: CRM API
  description: Customer Relationship Management API
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: Local development server

paths:
  # Authentication Routes
  /signup:
    post:
      summary: User Signup
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
              required:
                - name
                - email
                - password
      responses:
        '201':
          description: User created successfully
        '400':
          description: Invalid input
        '409':
          description: Email already exists
  /login:
    post:
      summary: User Login
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Successful login
        '401':
          description: Unauthorized

  /logout:
    post:
      summary: User Logout
      tags:
        - Authentication
      responses:
        '200':
          description: Successful logout
        '401':
          description: Unauthorized

  /isLogged:
    post:
      summary: Check User Login Status
      tags:
        - Authentication
      responses:
        '200':
          description: User is logged in
        '401':
          description: User is not logged in

  # User Routes
  /users:
    get:
      summary: Get All Users
      tags:
        - Users
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /users/{uid}:
    get:
      summary: Get User by ID
      tags:
        - Users
      parameters:
        - name: uid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

    put:
      summary: Update User Details
      tags:
        - Users
      parameters:
        - name: uid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: User details updated
        '400':
          description: Invalid input

    delete:
      summary: Delete User
      tags:
        - Users
      parameters:
        - name: uid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User deleted
        '404':
          description: User not found

  /users/{uid}/password:
    put:
      summary: Update User Password
      tags:
        - Users
      parameters:
        - name: uid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                current_password:
                  type: string
                new_password:
                  type: string
      responses:
        '200':
          description: Password updated
        '400':
          description: Invalid current password

  /users/{uid}/role:
    put:
      summary: Update User Role
      tags:
        - Users
      parameters:
        - name: uid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  type: string
                  enum: ['admin', 'user', 'manager']
      responses:
        '200':
          description: User role updated
        '400':
          description: Invalid role

  /users/{uid}/another:
    get:
      summary: Get Another User's Information
      tags:
        - Users
      parameters:
        - name: uid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User information retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  # Customer Routes
  /create_customer/{lid}:
    post:
      summary: Create Customer
      tags:
        - Customers
      parameters:
        - name: lid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerCreate'
      responses:
        '200':
          description: Customer created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: Invalid input

  /get_customers:
    get:
      summary: Get All Customers
      tags:
        - Customers
      responses:
        '200':
          description: List of customers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'

  /get_customer/{id}:
    get:
      summary: Get Customer by ID
      tags:
        - Customers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Customer details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '404':
          description: Customer not found

  /get_customer_of_user:
    get:
      summary: Get Customers of Current User
      tags:
        - Customers
      responses:
        '200':
          description: List of user's customers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'

  /get_customer_by_user/{id}:
    get:
      summary: Get Customers by User ID
      tags:
        - Customers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of customers for specific user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'

  /update_customer/{id}:
    put:
      summary: Update Customer Information
      tags:
        - Customers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerUpdate'
      responses:
        '200':
          description: Customer information updated
        '400':
          description: Invalid input

  /delete_customer/{id}:
    delete:
      summary: Delete Customer
      tags:
        - Customers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Customer deleted
        '404':
          description: Customer not found

  # Lead Routes
  /create_lead:
    post:
      summary: Create Lead
      tags:
        - Leads
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LeadCreate'
      responses:
        '200':
          description: Lead created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lead'
        '400':
          description: Invalid input

  /get_all_leads:
    get:
      summary: Get All Leads
      tags:
        - Leads
      responses:
        '200':
          description: List of all leads
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Lead'

  /get_leads_by_user:
    get:
      summary: Get Leads by Current User
      tags:
        - Leads
      responses:
        '200':
          description: List of user's leads
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Lead'

  /get_lead/{id}:
    get:
      summary: Get Lead by ID
      tags:
        - Leads
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Lead details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lead'
        '404':
          description: Lead not found

  /get_lead_by_name/{name}:
    get:
      summary: Get Leads by Name
      tags:
        - Leads
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Leads matching the name
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Lead'

  /update_lead/{id}:
    patch:
      summary: Update Lead Information
      tags:
        - Leads
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LeadUpdate'
      responses:
        '200':
          description: Lead information updated
        '400':
          description: Invalid input

  /delete_lead/{id}:
    delete:
      summary: Delete Lead
      tags:
        - Leads
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Lead deleted
        '404':
          description: Lead not found

  # Interaction Routes
  /create_interaction_with_lead/{lid}:
    post:
      summary: Create Interaction with Lead
      tags:
        - Interactions
      parameters:
        - name: lid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InteractionCreate'
      responses:
        '200':
          description: Interaction created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Interaction'
        '400':
          description: Invalid input

  /update_interaction/{iid}:
    put:
      summary: Update Interaction Note
      tags:
        - Interactions
      parameters:
        - name: iid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                note:
                  type: string
      responses:
        '200':
          description: Interaction note updated
        '400':
          description: Invalid input

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
          enum: ['admin', 'user', 'manager']

    UserUpdate:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email

    Customer:
      type: object
      properties:
        id:
          type: string
          format: uuid
        lead_id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string

    CustomerCreate:
      type: object
      required:
        - name
        - email
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string

    CustomerUpdate:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string

    Lead:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        status:
          type: string
          enum: ['new', 'contacted', 'qualified', 'lost', 'converted']

    LeadCreate:
      type: object
      required:
        - name
        - email
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        status:
          type: string
          default: 'new'
          enum: ['new', 'contacted', 'qualified', 'lost', 'converted']

    LeadUpdate:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        status:
          type: string
          enum: ['new', 'contacted', 'qualified', 'lost', 'converted']

    Interaction:
      type: object
      properties:
        id:
          type: string
          format: uuid
        lead_id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        note:
          type: string
        date:
          type: string
          format: date-time

    InteractionCreate:
      type: object
      required:
        - note
      properties:
        note:
          type: string

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []